// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.team13.web;

import ee.itcollege.team13.domain.Bed;
import ee.itcollege.team13.domain.BorderGuardInBed;
import ee.itcollege.team13.domain.House;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect BedController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String BedController.create(@Valid Bed bed, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("bed", bed);
            return "beds/create";
        }
        uiModel.asMap().clear();
        bed.persist();
        return "redirect:/beds/" + encodeUrlPathSegment(bed.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String BedController.createForm(Model uiModel) {
        uiModel.addAttribute("bed", new Bed());
        List dependencies = new ArrayList();
        if (House.countHouses() == 0) {
            dependencies.add(new String[]{"house", "houses"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "beds/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String BedController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("bed", Bed.findBed(id));
        uiModel.addAttribute("itemId", id);
        return "beds/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String BedController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("beds", Bed.findBedEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Bed.countBeds() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("beds", Bed.findAllBeds());
        }
        return "beds/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String BedController.update(@Valid Bed bed, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("bed", bed);
            return "beds/update";
        }
        uiModel.asMap().clear();
        bed.merge();
        return "redirect:/beds/" + encodeUrlPathSegment(bed.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String BedController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("bed", Bed.findBed(id));
        return "beds/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String BedController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Bed.findBed(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/beds";
    }
    
    @ModelAttribute("beds")
    public Collection<Bed> BedController.populateBeds() {
        return Bed.findAllBeds();
    }
    
    @ModelAttribute("borderguardinbeds")
    public Collection<BorderGuardInBed> BedController.populateBorderGuardInBeds() {
        return BorderGuardInBed.findAllBorderGuardInBeds();
    }
    
    @ModelAttribute("houses")
    public Collection<House> BedController.populateHouses() {
        return House.findAllHouses();
    }
    
    String BedController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
